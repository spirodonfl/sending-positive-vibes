(function(){var version='1.0.0';var objectTypes={'function':!0,'object':!0};var root=(objectTypes[typeof window]&&window)||this;var freeExports=objectTypes[typeof exports]&&exports&&!exports.nodeType&&exports;var freeModule=objectTypes[typeof module]&&module&&!module.nodeType&&module;var freeGlobal=freeExports&&freeModule&&typeof global=='object'&&global;if(freeGlobal&&(freeGlobal.global===freeGlobal||freeGlobal.window===freeGlobal||freeGlobal.self===freeGlobal)){root=freeGlobal}
var moduleExports=freeModule&&freeModule.exports===freeExports&&freeExports;var geohash={};var BASE32_CODES="0123456789bcdefghjkmnpqrstuvwxyz";var BASE32_CODES_DICT={};for(var i=0;i<32;i++){BASE32_CODES_DICT[BASE32_CODES.charAt(i)]=i}
var DIRECTIONS={'north':[1,0],'northeast':[1,1],'east':[0,1],'southeast':[-1,1],'south':[-1,0],'southwest':[-1,-1],'west':[0,-1],'northwest':[1,-1]};function encode(latitude,longitude,precision){var chars=[],bits=0,code,mid,islon=!0,hash_value=0,maxlat=90,minlat=-90,maxlon=180,minlon=-180;precision=precision||9;while(chars.length<precision){if(islon){mid=(maxlon+minlon)/2;if(longitude>mid){hash_value=(hash_value<<1)+1;minlon=mid}else{hash_value=(hash_value<<1)+0;maxlon=mid}}else{mid=(maxlat+minlat)/2;if(latitude>mid){hash_value=(hash_value<<1)+1;minlat=mid}else{hash_value=(hash_value<<1)+0;maxlat=mid}}
islon=!islon;bits++;if(bits==5){code=BASE32_CODES[hash_value];chars.push(code);bits=0;hash_value=0}}
return chars.join('')}
function decode_bbox(hash_string){var islon=!0,hash_value=0,i=0,l=hash_string.length,code,bits,bit,mid,maxlat=90,minlat=-90,maxlon=180,minlon=-180;for(;i<l;i++){code=hash_string[i].toLowerCase();hash_value=BASE32_CODES_DICT[code];for(bits=4;bits>=0;bits--){bit=(hash_value>>bits)&1;if(islon){mid=(maxlon+minlon)/2;if(bit==1){minlon=mid}else{maxlon=mid}}else{mid=(maxlat+minlat)/2;if(bit==1){minlat=mid}else{maxlat=mid}}
islon=!islon}}
return[minlat,minlon,maxlat,maxlon]}
function decode(hash_string){var bbox=decode_bbox(hash_string),lat=(bbox[0]+bbox[2])/2,lon=(bbox[1]+bbox[3])/2,laterr=bbox[2]-lat,lonerr=bbox[3]-lon;return{lat:lat,lon:lon,error:{lat:laterr,lon:lonerr}}}
function neighbor(hashstring,direction){if(typeof direction==='string'){direction=DIRECTIONS[direction];if(!direction){throw new Error('Invalid direction. Look at a compass and pick a better one.')}}
var lonlat=decode(hashstring),neighbor_lat=lonlat.lat+direction[0]*lonlat.error.lat*2,neighbor_lon=lonlat.lon+direction[1]*lonlat.error.lon*2;return encode(neighbor_lat,neighbor_lon,hashstring.length)}
geohash.VERSION=version;geohash.encode=encode;geohash.decode=decode;geohash.decode_bbox=decode_bbox;geohash.neighbor=neighbor;if(typeof define=='function'&&typeof define.amd=='object'&&define.amd){define('geohash',function(){return geohash})}else if(freeExports&&freeModule){if(moduleExports){freeModule.exports=geohash}else{freeExports.geohash=geohash}}else{root.geohash=geohash}}.call(this))